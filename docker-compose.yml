version: '3.7'

#
# Container names have a domain-like naming scheme to facilitate dnsmasq usage.
# By ending in .doc, which is not a valid TLD, we can easily configure dnsmasq
# to resolve these names to the docker machine. This allows the containers to
# use the same names to refer to each other as the host does when resolving the
# container names.
#

services:
  auth-svc.doc:
    build:
      context: .
      dockerfile: containers/auth-svc/Dockerfile
    container_name: auth-svc.doc
    environment:
      NODE_ENV: development
      DEBUG: "1"
      SVC_BASE_URI: "https://auth-svc.doc:3000"
      DEFAULT_PROTOCOL: "saml"
      CA_CERT_FILE: certs/ca.crt
      OIDC_CLIENT_ID: client_id
      OIDC_CLIENT_SECRET: client_secret
      OIDC_ISSUER_URI: "http://oidc.doc"
      # allow the self-signed certs installed on shibboleth container
      NODE_TLS_REJECT_UNAUTHORIZED: "0"
      SAML_IDP_METADATA_URL: "https://shibboleth.doc:4443/idp/shibboleth"
      SAML_NAMEID_FORMAT: "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"
      SAML_SP_ENTITY_ID: "urn:example:sp"
      SP_CERT_FILE: certs/server.crt
      SP_KEY_FILE: certs/server.key
    networks:
      - authen
    ports:
      - "3000:3000"
  ldap.doc:
    build:
      context: containers/ldap
    container_name: ldap.doc
    networks:
      - authen
    ports:
      - "389:389"
      - "636:636"
  oidc.doc:
    image: soluto/oidc-server-mock:latest
    container_name: oidc.doc
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      API_RESOURCES_INLINE: |
        []
      USERS_CONFIGURATION_INLINE: |
        [
          {
            "SubjectId": "408727",
            "Username": "johndoe",
            "Password": "passw0Rd?",
            "Claims": [
              { "Type": "name", "Value": "John Doe" },
              { "Type": "given_name", "Value": "John" },
              { "Type": "family_name", "Value": "Doe" },
              { "Type": "email", "Value": "johndoe@example.com" },
              { "Type": "email_verified", "Value": "true" }
            ]
          }
        ]
      CLIENTS_CONFIGURATION_INLINE: |
        [
          {
            "ClientId": "client_id",
            "ClientSecrets": [ "client_secret" ],
            "Description": "Client for client credentials flow",
            "AllowedGrantTypes": [ "authorization_code" ],
            "AllowAccessTokensViaBrowser": true,
            "RedirectUris": [
              "https://auth-svc.doc:3000/oidc/callback",
              "https://auth-svc.doc:3000"
            ],
            "AllowedScopes": [ "openid", "profile", "email" ],
            "IdentityTokenLifetime": 3600,
            "AccessTokenLifetime": 3600
          }
        ]
    networks:
      - authen
    ports:
      # The mock OIDC server is bound to port 80, and our service and our system
      # both need to agree on the port value, so we are stuck with using port 80
      # on the host.
      - "80:80"
  # p4d.doc is in the extension repository
  shibboleth.doc:
    build:
      context: containers/shibboleth
    container_name: shibboleth.doc
    depends_on:
      - ldap.doc
    environment:
      JETTY_BROWSER_SSL_KEYSTORE_PASSWORD: "Passw0rd!"
      JETTY_BACKCHANNEL_SSL_KEYSTORE_PASSWORD: "Passw0rd!"
    networks:
      - authen
    ports:
      - "4443:4443"

networks:
  authen:
    name: auth-service
