#!/usr/bin/env node
//
// Copyright 2020 Perforce Software
//

/**
 * Module dependencies.
 */
const app = require('../lib/app')
const logger = require('../lib/logging')
const { createServer } = require('../lib/server')
const url = require('url')

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(getPort())
app.set('port', port)

/**
 * Create HTTP/S server.
 */
const server = createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */
if (process.env.BIND_ADDRESS) {
  // Windows is different (?) so allow explicitly setting the bind address.
  // According to the Node documentation, it binds to 0.0.0.0 by default.
  server.listen(port, process.env.BIND_ADDRESS)
} else {
  server.listen(port)
}
server.on('error', onError)
server.on('listening', onListening)

// Use PORT if it is defined, otherwise get the port from the SVC_BASE_URI,
// defaulting to 80 or 443 depending on the protocol.
function getPort () {
  if (process.env.PORT) {
    return process.env.PORT
  }
  const u = new url.URL(process.env.SVC_BASE_URI)
  if (u.port) {
    return u.port
  }
  if (u.protocol === 'https:') {
    return '443'
  } else if (u.protocol === 'http:') {
    return '80'
  }
  throw new Error('protocol must be http: or https:')
}

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort (val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error('%s requires elevated privileges', bind)
      process.exit(1)
    case 'EADDRINUSE':
      logger.error('%s is already in use', bind)
      process.exit(1)
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  logger.debug('Listening on %s', bind)
}
